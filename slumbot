#!/usr/bin/env bash
# shellcheck disable=2034,2155,2162

trap 'printf "\e[9;0f\e[?25h"' 0
BUTTON="Ⓓ "
REGEX='"action":\s*"([/0-9fkcb]*)",\s*"client_pos":\s*([01]),\s*"hole_cards":\s*\[\s*"([2-9TJQKA][shdc])",\s*"([2-9TJQKA][shdc])"\s*\],\s*"board":\s*\[[[:space:]"]*([2-9TJQKA][shdc])?[[:space:]",]*([2-9TJQKA][shdc])?[[:space:]",]*([2-9TJQKA][shdc])?[[:space:]",]*([2-9TJQKA][shdc])?[[:space:]",]*([2-9TJQKA][shdc])?[[:space:]"]*\],?(\s*"bot_hole_cards":\s*\[\s*"([2-9TJQKA][shdc])",\s*"([2-9TJQKA][shdc])"\s*\],\s*"winnings":\s*(-?[0-9]+),\s*"won_pot":\s*-?[0-9]+,\s*"session_num_hands":\s*(-?[0-9]+),\s*"baseline_winnings":\s*(-?[0-9]+),\s*"session_total":\s*(-?[0-9]+),\s*"session_baseline_total":\s*(-?[0-9]+))?'
ERROR='"error_msg":\s*"([[:print:]]+)"'
CALLED='b([0-9]+)c'
UNCALLED='([0-9]+)?b([0-9]+)$'
CURRENT='([/kcf]|b[0-9]+)?([/kcf]|b[0-9]+)?([/kcf]|b[0-9]+)?$'
cards() {
    for card; do
        if [[ -n $card ]]; then
            case ${card:1:1} in
            s) local suit="0♤" ;;
            h) local suit="1♡" ;;
            d) local suit="4♢" ;;
            c) local suit="2♧" ;;
            esac
            printf "\e[3%sm%s%s\e[0m\e[2C" "${suit:0:1}" "${card:0:1}" "${suit:1:1}"
        else
            printf "  \e[2C"
        fi
    done
}
main() {
    printf "\e[?25l\e[2J\e[H╭──╮╭──╮
│  ││  │
╰──╯╰──╯
┌──────┐  ╭──╮╭──╮╭──╮╭──╮╭──╮
│      │  │  ││  ││  ││  ││  │
└──────┘  ╰──╯╰──╯╰──╯╰──╯╰──╯
╭──╮╭──╮
│  ││  │
╰──╯╰──╯\e[H"

    local header="content-type: application/json"
    local body=$(curl -s https://slumbot.com/api/new_hand --header "$header" -d {})
    local token="\"token\":\"${body: -38:36}\""
    while true; do
        if [[ $body =~ $REGEX ]]; then
            # position
            local position=${BASH_REMATCH[2]}
            printf "\e[2;9f%s\e[8;9f%s" "${BUTTON:$position:1}" "${BUTTON:$((position ^ 1)):1}"

            # hole cards
            printf "\e[8;2f"
            cards "${BASH_REMATCH[3]}" "${BASH_REMATCH[4]}"

            # board
            printf "\e[5;12f"
            cards "${BASH_REMATCH[5]}" "${BASH_REMATCH[6]}" "${BASH_REMATCH[7]}" "${BASH_REMATCH[8]}" "${BASH_REMATCH[9]}"

            # bot hole cards
            printf "\e[2;2f"
            cards "${BASH_REMATCH[11]}" "${BASH_REMATCH[12]}"

            # stats
            if [[ ${BASH_REMATCH[10]} ]]; then
                local result=${BASH_REMATCH[13]}
                local hands=${BASH_REMATCH[14]}
                local bot_result=${BASH_REMATCH[15]}
                local total=${BASH_REMATCH[16]}
                local bot_total=${BASH_REMATCH[17]}
                [[ ${result:0:1} != - ]] && local result="+$result"
                [[ ${bot_result:0:1} != - ]] && local bot_result="+$bot_result"
                [[ ${total:0:1} != - ]] && local total="+$total"
                [[ ${bot_total:0:1} != - ]] && local bot_total="+$bot_total"
                printf "\e[1;12f%-5s\e[2;12f%-15s\e[3;12f%-15s" "$hands" "$total ($bot_total)" "$result ($bot_result)"
            else
                printf "\e[1;12f\e[0K\e[2;12f\e[0K\e[3;12f\e[0K"
            fi

            # action
            local action="/b50b100${BASH_REMATCH[1]}"
            if [[ $action =~ $CURRENT ]]; then
                local index=6
                for match in "${BASH_REMATCH[@]:1}"; do
                    case $match in
                    "") local act="" ;;
                    /)
                        local lengther=${action//\//}
                        case $((${#action} - ${#lengther})) in
                        1) local act="(preflop)" ;;
                        2) local act="(flop)" ;;
                        3) local act="(turn)" ;;
                        4) local act="(river)" ;;
                        esac
                        ;;
                    f) local act=fold ;;
                    k) local act=check ;;
                    c) local act=call ;;
                    *)
                        local act="${match/b/}"
                        act=$((act / 10))
                        ;;
                    esac
                    [[ $act ]] && printf "\e[%s;12f> %-9s" "$((++index))" "$act"
                done
            fi

            # pot
            local pot=0
            local size=150
            if [[ $action =~ $UNCALLED ]]; then
                pot=$((pot + BASH_REMATCH[1] + BASH_REMATCH[2]))
                [[ ${BASH_REMATCH[2]} -gt $size ]] && size=${BASH_REMATCH[2]}
            fi
            while [[ $action =~ $CALLED ]]; do
                pot=$((pot + BASH_REMATCH[1] * 2))
                action=${action/${BASH_REMATCH[0]}/}
            done
            printf "\e[5;3f%-5s" "$((pot / 10))"

            # clear message
            printf "\e[10;0f\e[0K"
        elif [[ $body =~ $ERROR ]]; then
            printf "\e[10;0f%s" "${BASH_REMATCH[1]}"
        else
            printf "\e[10;1f%s" "$body"
        fi
        read -rn1 key
        local chips=$((20000 - pot / 2))
        local path=act
        local incr=""
        case $key in
        a) path=new_hand ;;
        s) incr=f ;;
        d) incr=k ;;
        f) incr=c ;;
        j) incr="b$((size * 2))" ;;
        k) incr="b$((pot / 2))" ;;
        l) incr="b$pot" ;;
        \;) incr="b$chips" ;;
        q) return ;;
        esac
        [[ ${incr:0:1} == b ]] && [[ ${incr:1} -gt $chips ]] && incr="b$chips"
        [[ $incr ]] && incr=",\"incr\":\"$incr\""
        body=$(curl -s "https://slumbot.com/api/$path" --header "$header" -d "{$token$incr}")
    done
}

main
